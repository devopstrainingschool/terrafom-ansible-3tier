---
- name : Configure nfs servers
  hosts: nfs
  become: yes
  serial: 1
  become_user: root
  vars:
    proxy_env:
      http_proxy: http://{{ hostvars[inventory_hostname].proxy }}:3128
      https_proxy: http://{{ hostvars[inventory_hostname].proxy }}:3128
      ftp_proxy: http://{{ hostvars[inventory_hostname].proxy }}:3128
  environment: "{{ proxy_env }} "
  tasks :
    - name: Modify /etc/environment
      lineinfile:
        path: /etc/environment
        line: LC_ALL="en_US.UTF-8"

    # - name: Install Aptitude
    #   apt:
    #     name: aptitude

    # - name: Full update Ubuntu
    #   apt:
    #     upgrade: full
    #     update_cache: yes
    #     cache_valid_time: 86400 #One day
    #   register: task_result

    - name: Install nfs common packages
      apt: name=nfs-common state=present update_cache=yes

    - name: temp fix for nfs starting order of services
      shell: "systemctl add-wants multi-user.target rpcbind.service"

    - name: Install nfs server packages
      apt: name=nfs-kernel-server state=present update_cache=yes

    # - name: (reboot) Reboot triggered
    #   command: /sbin/shutdown -r +1 "Ansible-triggered Reboot"
    #   async: 0
    #   poll: 0
    #   when: task_result is changed
 
    # - name: Wait for the reboot to complete if there was a change.
    #   wait_for_connection:
    #     connect_timeout: 30
    #     sleep: 60
    #     delay: 120
    #   when: task_result is changed

    - name: Creates nfs export directory
      file:
        path: /nfs
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Creates gitlab data dirs in nfs export dir
      file:
        path: "/nfs/{{ item }}"
        state: directory
      with_items:
        - git-data
        - .ssh
        - uploads
        - shared
        - builds

    - name: Place nfs exports
      template:
        src: nfs_exports.j2
        dest: /etc/exports
        owner: root
        group: root

    - name: restart nfs server
      service: name=nfs-kernel-server state=restarted
      when: hostvars[inventory_hostname].role == "master"
